import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { ConnectButton } from '@rainbow-me/rainbowkit';
import { InputNumber, Button,Card , Row,  Col,Space, Spin} from 'antd';
import { useContract,useSigner, useAccount } from 'wagmi';
import { TOKEN_ADDRESS, VENDOR_ADDRESS } from '@/contracts/addresses';
import { VENDOR_ABI } from '@/contracts/abis/vendorAbi';
import { useState } from 'react';
import { ethers } from 'ethers';
import { TOKEN_ABI } from '@/contracts/abis/tokenAbi';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export default function Home() {
  
  
  const { address, isConnected } = useAccount();
  const [EthAmount,setEthAmount] = useState(0);
  const [TokenAmount,setTokenAmount] = useState(0);
  const [loading, setLoading] = useState(false);
  const { data: signer, isError, isLoading } = useSigner();
  const vendorContract = useContract({address: VENDOR_ADDRESS, abi: VENDOR_ABI, signerOrProvider: signer});
  const TokenContract = useContract({address: TOKEN_ADDRESS, abi: TOKEN_ABI, signerOrProvider: signer});

  const BuyToken = async () => {
    console.log(EthAmount)
    if(EthAmount > 0 && isConnected){
      let tx = await  vendorContract?.buyTokens({value: ethers.utils.parseEther(EthAmount.toString())});
      setLoading(true);
      await tx.wait()
      toast.success('ðŸ¦„ Transaction Successfull', {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
        });
      setLoading(false);
      setEthAmount(0)
    }

  }

const SellToken = async ()=>{

  if(isConnected && TokenAmount > 0){

    let tx_approve = await  TokenContract?.approve(VENDOR_ADDRESS, ethers.utils.parseEther(TokenAmount.toString())) 
    setLoading(true)
    await tx_approve.wait()
    toast.success('ðŸ¦„ Tokens Approved', {
      position: "top-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      });
 
    let tx_sell = await  vendorContract?.sellTokens(ethers.utils.parseEther(TokenAmount.toString())) 
    await tx_sell.wait()
    setLoading(false)
 
    toast.success('ðŸ¦„ ETH has been Transfered to you account', {
      position: "top-right",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      });
 

  }


}




  return (
    <>
      <Head>
        <title>Token Vendor Machine</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <ConnectButton />
      <ToastContainer
          position="top-left"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="dark"
        />
<h1>Token Vendor Machine</h1>

{
loading && <Spin size="large" />
}
      <Card
      hoverable
    style={{
      width: "50%",
      height: "40vh"
    }}

  
  >
<div style={{justifyContent:"center", textAlign:"center"}}>


<div style={{marginTop:"50px"}} >

<Row justify="center" align="middle" >

  <Space direction="horizontal" size={"large"}>


<Col >

          <InputNumber onChange={(e)=>{setEthAmount(Number(e))}} style={{width:"100%"}} size='large' placeholder={"0.00"}  prefix={<h3>ETH</h3>} />
</Col>

<Col >

      <Button type="primary" onClick={ BuyToken}>Buy Token</Button>
</Col>
  </Space>
</Row>
</div>



 <div  style={{marginTop:"40px"}}> 
<Row justify={"center"}>

<Space direction="horizontal" size={"large"}>

<Col>

      <InputNumber  onChange={(e)=>{setTokenAmount(Number(e))}}  style={{width:"100%"}} size='large' placeholder={TokenAmount==0 && '0.00' || '0.00'}   prefix={<h3>GLD</h3>} />
</Col>

<Col>

      <Button type="primary" onClick={SellToken}>Sell Token</Button>

</Col>
</Space>
</Row>
  </div>     

</div>
  </Card>


      
      </main>
    </>
  )
}
